{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lost Saga IO3D","text":""},{"location":"#lost-saga-io3d","title":"Lost Saga IO3D","text":"<p>Blender add-on to import/export various Lost Saga formats. Supported files are <code>skl</code>/<code>msh</code>/<code>cms</code>/<code>ani</code></p> <p>Main repository github.com/Trisnox/lost-saga-io3d</p> <ul> <li> <p> Installation</p> <p>Guide on how to install the add-on</p> <p> Installation</p> </li> <li> <p> Tutorial/Guide</p> <p>Guide on how to operate the add-on</p> <p> Tutorial/Guides</p> </li> </ul> <p>Or if you're looking for an in-depth explanation about certain operator/button</p> <ul> <li> <p> SKL/MSH Panel</p> <p>SKL/MSH Panel Panel to import skeleton, mesh/collision, or general utility</p> <p> SKL/MSH Panel</p> </li> <li> <p> MSH Panel</p> <p>MSH Panel Panel to operate with meshes, such as exporting mesh/collision, or change shader</p> <p> MSH Panel</p> </li> <li> <p> ANI Panel</p> <p>ANI Panel Panel to operate with animation, such as importing/exporting animation, skeleton operations, and applying animations</p> <p> ANI Panel</p> </li> </ul> <p>Or other topics</p> <ul> <li> <p> Binary Structure</p> <p>Binary Structure Post explaining about the binary structure of losa 3d formats</p> <p> Binary Structure</p> </li> <li> <p> Sample Files</p> <p>Sample Files Project files as well their resource pack made with the add-on</p> <p> Sample Files</p> </li> <li> <p> Events Editor</p> <p>Events Editor Simple script to edit events on <code>.ani</code> files</p> <p> Events Editor</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Import/Export various formats, such as: skeleton (<code>.skl</code>), mesh (<code>.msh</code>), mesh collision (<code>.cms</code>), animation (<code>.ani</code>). Result is almost similar when compared in-game and vice versa</li> <li>Blender skeleton integration, such as: rename losa bones to blender and vice versa, various skeleton import mode (lite, advanced, retarget), operator to help with animating, and many more</li> <li>Many operators to operate with meshes as well the ability to export them, such as: export material, calculate bounding box, preview mesh split, split mesh based off threshold, shader to imitate Lost Saga (toon shader and various skin tones), and many more</li> <li>Animation entries table. This table can be used to re-use animation that has been previously imported without the need to re-import the animation again, this table also automatically calculate keyframe count based on scene fps</li> </ul>"},{"location":"#note","title":"Note","text":"<p>Lost Saga measure their unit in meters, while blender measure them in centimeters, this will cause any objects imported to appear 10x larger in Blender. Setup Scene Operator was made to fix this issue in one click</p> <p>Also worth noting that Lost Saga derives their coordinate system from DirectX, but this script already handle such difference for both import/export</p> <p>Lost Saga might also uses modified Ogre3D as their renderer</p>"},{"location":"#special-thanks","title":"Special Thanks","text":"<p>Thanks to zex (imageliner on Discord) for showing me the correct rotation for Lost Saga skeleton</p>"},{"location":"#to-do","title":"To-Do","text":"<p>to-do</p> Rewrite RetargetEvents <p>The current script is just basically proof of concept, it is possible to retarget animation into Lost Saga skeleton, exporting the animation, and then apply it back to Lost Saga skeleton in order to be exported.</p> <p>However, the current solution, which is creating advanced skeleton, but with <code>origin_correction</code> set without rotation/scale, and then apply the transformation of all bones, which was hoped so that it preserve the bone direction and coordinate system, somewhat succeed, but the final result is nowhere close (likely because the the source armature had to be modifed to match the target armature). </p> <p>However, I recently discovered about delta transformation, and I might be able to make use of this.</p> <p>What I had in mind was creating a text/enum property, which can be accessed through panel. And guess what? We can insert keyframes to properties as well. This make events doable. With enum, I can try to list all possible events (including custom user defined as well), and then the user just simply need to insert keyframe. The script will then read the animation data, which then the animation can export alongside the events. It might only insert event if it comes in pairs in same frame, otherwise they won't append event.</p> <p>Unfortunately, there is no way to force pair an insert keyframe (as far as I know).</p> <p></p>"},{"location":"#support","title":"Support","text":"<p>You can contact me through Discord (trisnox) or through my Discord server</p>"},{"location":"binary_structure/","title":"Binary Structure","text":""},{"location":"binary_structure/#binary-structure","title":"Binary Structure","text":"<p>This section will explain the binary structure of certain files. All files are packed using C data types with little endian and using 32-bit size.</p> <p>Double/triple float values usually defined using <code>D3DXVECTOR3</code> variable, which contains [x, y, z].</p> <p>Quaternion values always defined using <code>D3DXQUATERNION</code> variable, which contains [x, y, z, w], the order might need to be adjusted depending on program you're using.</p> <p>Since the 3d format comes from DirectX, coordinate system need to be adjusted depending on which program you're using. In summary, (x, y, z) will resulted as (x, z, -y) in Blender. And of course, the most easiest solution would be to just import them as is, and then rotate them later.</p> <p></p>"},{"location":"binary_structure/#token-definition","title":"Token Definition","text":"<p>These token are usually used for headers</p> Definition Value SKELETON_TOKEN SKL\\0 MATERIAL_TOKEN MTL\\0 ANIMATION_TOKEN ANI\\0 MESH_TOKEN MSH\\0 FONT_TOKEN FNT\\0 COL_MESH_TOKEN CMS\\0 PGF_TOKEN PGF\\0 ANIMATE_EFFECT_TOKEN AFX\\0 OUTLINE_EDGE_TOKEN EDG\\0 SKELETON_VERSION 1000 MESH_VERSION 2000 VERTEX_COLOR_MESH_VERSION 2001 MESH_CONTROL_POINT_VERSION 2002 MATERIAL_VERSION 3000 ANIMATION_VER_DEFAULT 4000 ANIMATION_VER_COMP4 4001 ANIMATION_VER_COMP8 4002 FONT_VERSION 5000 COL_MESH_VERSION 5000 ANIMATE_EFFECT_VERSION 6000 OUTLINE_EDGE_VERSION 7000"},{"location":"binary_structure/#3d-types","title":"3D Types","text":""},{"location":"binary_structure/#vertex-component","title":"Vertex Component","text":"<p>Used for vertex mask, which indicates whether component is available or not.</p> <p>To operate this, simply use bitwise AND operator with the component, eg: <code>vertex_mask &amp; IOFVF_UV0</code>, which will return <code>1</code> if it contains uv map, or <code>0</code> if it does not have.</p> Vertex Component Value Actual Value IOFVF_POSITION 1&lt;&lt;0 1 IOFVF_POSITION2 1&lt;&lt;1 2 IOFVF_POSITIONW 1&lt;&lt;2 4 IOFVF_WEIGHTS 1&lt;&lt;3 8 IOFVF_INDICES 1&lt;&lt;4 16 IOFVF_NORMAL 1&lt;&lt;5 32 IOFVF_COLOR0 1&lt;&lt;6 64 IOFVF_COLOR1 1&lt;&lt;7 128 IOFVF_UV0 1&lt;&lt;8 256 IOFVF_UV1 1&lt;&lt;9 512 IOFVF_UV2 1&lt;&lt;10 1024 IOFVF_UV3 1&lt;&lt;11 2048 IOFVF_TANGENT 1&lt;&lt;12 4096 IOFVF_BINORMAL 1&lt;&lt;13 8192 IOFVF_END (not defined)"},{"location":"binary_structure/#mesh-type","title":"Mesh Type","text":"<p>You would not need to use any other type of mesh other than static, animation, and lightmap, as they're the only common mesh used by the game.</p> Index Type 0 MT_STATIC 1 MT_ANIMATION 2 MT_LIGHTMAP 3 MT_BILLBOARD 4 MT_NORMAL_BILLBOARD 5 MT_ANIMATE_EFFECT 6 MT_STATIC_VERTEX_COLOR"},{"location":"binary_structure/#skl","title":"SKL","text":""},{"location":"binary_structure/#header","title":"Header","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Signature, always equal to skeleton token int 4 Version, always equal to skeleton version"},{"location":"binary_structure/#biped","title":"Biped","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Biped Count. Number of bones <p>This structure only available if biped count is more than 0, it loops for each biped it has</p> Type Size (in bytes) Description int 4 Biped bone name length char variable The biped bone name, size is depending on the biped bone name length float 12 (contains 4 each) LocalTM Position. Likely indicates the bone position relative to the parent float 16 (contains 4 each) LocalTM Quaternion. Likely indicates the bone rotation relative to the parent float 12 (contains 4 each) ObjectTM Inverse Position. Likely indicates the bone position relative to world origin float 16 (contains 4 each) ObjectTM Inverse Quaternion. Likely indicates the bone rotation relative to world origin float 64 (contains 4 each) Bone Matrix. Need to be transposed first int 4 Parent bone name length char variable The parent bone name, size is depending on the parent bone name length, defaults to <code>NoParent</code> if there is no parent bone int 4 Child count <p>Note</p> <p>It is unknown why the matrix exist, it resembled humanoid form, but the catch is that the bone are always one-off when compared with the LocalTM. However, I already abandoned the matrix variable since LocalTM stores the most accurate position and rotation.</p> <p>As shown in this image, the legacy clavicle tail bone perfectly match the head bone of advanced clavicle bone.</p> <p></p> <p>Please understand that I have no knowledge of how game engine works or how do they operate this kind of thing internally.</p> <p>This structure only available if child count is more than 0, it loops for each child it has</p> Type Size (in bytes) Description int 4 Child bone name length char variable The child bone name, size is depending on the child bone name length"},{"location":"binary_structure/#linked-skeleton","title":"Linked Skeleton","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Linked skeleton name length char variable The linked skeleton name, size is depending on the linked skeleton name length. Likely used for animation that uses multiple skeleton?"},{"location":"binary_structure/#ani","title":"ANI","text":"<p>Unless specified otherwise, all time mentioned in this content is always in miliseconds</p>"},{"location":"binary_structure/#header_1","title":"Header","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Signature, always equal to animation token int 4 Version, can be either default, comp4, or comp8"},{"location":"binary_structure/#events","title":"Events","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Event Count. Number of events <p>This structure only available if event count is more than 0, loops for each event it has</p> Type Size (in bytes) Description int 4 Event type length char variable The event type, size is depending on the event type length int 4 Event name length char variable The event name, size is depending on the event name length float 4 Event time"},{"location":"binary_structure/#tracks","title":"Tracks","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Total time. The total duration of animation int 4 Total track count <p>This structure only available if total track count is more than 0, loops for each track it has</p> Type Size (in bytes) Description int 4 Biped bone name length char variable The biped bone name, size is depending on the biped bone name length float 4 Weight influence int 4 Keyframe count"},{"location":"binary_structure/#default","title":"DEFAULT","text":"<p>If version is equal to <code>ANIMATION_VER_DEFAULT</code>, then this structure will be used. Loops for each keyframe it has</p> Type Size (in bytes) Description float 16 (contains 4 each) Quaternion rotation float 12 (contains 4 each) Vector Transformation int 4 Time"},{"location":"binary_structure/#comp-4","title":"COMP 4","text":"<p>If version is equal to <code>ANIMATION_VER_COMP4</code>, then this structure will be used. Loops for each keyframe it has</p> Type Size (in bytes) Description long 4 Packed rotation float 12 (contains 4 each) Vector Transformation int 4 Time"},{"location":"binary_structure/#comp-8","title":"COMP 8","text":"<p>If version is equal to <code>ANIMATION_VER_COMP8</code>, then this structure will be used. Loops for each keyframe it has</p> Type Size (in bytes) Description long 4 Packed rotation, dwHigh long 4 Packed rotation, dwLow float 12 (contains 4 each) Vector Transformation int 4 Time"},{"location":"binary_structure/#msh","title":"MSH","text":""},{"location":"binary_structure/#header_2","title":"Header","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Signature, always equal to mesh token int 4 Version, usually equal to mesh version int 4 Mesh Type. Correspond to mesh type index long 4 Vertex mask. long 4 Vertex mask. float 12 (contains 4 each) Bounding box minimum float 12 (contains 4 each) Bounding box maximum float 4 Bounding radius"},{"location":"binary_structure/#submesh","title":"Submesh","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Submesh count <p>This structure only available if submesh count is more than 0, loops for each submesh it has</p> <p>The main mesh is counted towards the submesh, so basically submesh is just the total amount of mesh it has. Separating mesh is useful if you want to have different material/animation for each mesh. The submesh doesn't contain the actual submesh, but rather an index on where to split the mesh.</p> Type Size (in bytes) Description int 4 Min index. Starting index for vertices int 4 Vertex count int 4 Index Start. Starting index for faces int 4 Face count"},{"location":"binary_structure/#vertices-count","title":"Vertices Count","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Vertex count. Total amount of vertices"},{"location":"binary_structure/#components","title":"Components","text":"<p>Any structure listed on this section only available if vertex mask return corresponding value.</p> <p>Also, all structure listed in this section loops for each vertex count, unless specified otherwise</p>"},{"location":"binary_structure/#verticesposition","title":"Vertices/Position","text":"<p>Component: <code>IOFVF_POSITION</code></p> Type Size (in bytes) Description float 12 (contains 4 each) Position. Vector position of each vertices"},{"location":"binary_structure/#normals","title":"Normals","text":"<p>Component: <code>IOFVF_NORMAL</code></p> Type Size (in bytes) Description float 12 (contains 4 each) Normals. Normals of each vertices"},{"location":"binary_structure/#tangent","title":"Tangent","text":"<p>Component: <code>IOFVF_TANGENT</code></p> Type Size (in bytes) Description float 12 (contains 4 each) Tangent. Tangent of each vertices"},{"location":"binary_structure/#binormal","title":"Binormal","text":"<p>Component: <code>IOFVF_BINORMAL</code></p> Type Size (in bytes) Description float 12 (contains 4 each) Binormal. Binormal of each vertices"},{"location":"binary_structure/#vertex-color","title":"Vertex Color","text":"<p>Component: <code>IOFVF_COLOR0</code></p> Type Size (in bytes) Description long 4 Vertex color. The color of each vertices"},{"location":"binary_structure/#uv-maplightmap-uv","title":"UV map/Lightmap UV","text":"<p>Component: <code>IOFVF_UV0</code></p> <p>If this mesh type if a lightmap, then this UV is a lightmap UV, otherwise it's the main UV map.</p> Type Size (in bytes) Description float 8 (contains 4 each) UV map. 2D vector of the UV map"},{"location":"binary_structure/#secondary-uv-map","title":"Secondary UV map","text":"<p>Component: <code>IOFVF_UV1</code></p> <p>Only for lightmap. This contains the main UV map for the main texture</p> Type Size (in bytes) Description float 8 (contains 4 each) UV map. 2D vector of the UV map"},{"location":"binary_structure/#weights","title":"Weights","text":"<p>Component: <code>IOFVF_WEIGHTS</code>* and <code>IOFVF_INDICES</code>*</p> <p>* The source code does not check if both flags are true, and instead it is processed individually. But you still need both component if you want to include weights</p> <p>This structure does not loop for each vertex count</p> Type Size (in bytes) Description int 4 Biped index count. Total amount of vertex group it has <p>This structure only available if biped index count is more than 0, it loops for each biped index it has</p> Type Size (in bytes) Description int 4 Biped name length char variable The biped name, size is depending on the biped name length <p>Always available</p> <p>Since DirectX only support maximum of 4 bone influence per vertex, each array contains 4 float of weight. However, Lost Saga have slightly different operations, as soon it hit zero weights, it will break the loop and continue to the next indices. So it is recommended to sort the weights first.</p> Type Size (in bytes) Description float 16 (contains 4 each) Weight. Array of weights float 16 (contains 4 each) Biped ID. Order always paired with weight"},{"location":"binary_structure/#billboard-center","title":"Billboard Center","text":"<p>Component: <code>IOFVF_POSITION2</code></p> <p>Unused. None of the mesh file has this flag</p> Type Size (in bytes) Description float 12 (contains 4 each) Position. Vector position of each vertices"},{"location":"binary_structure/#faces","title":"Faces","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Face count <p>This structure only available if face count is more than 0, it loops for each face it has. Face count must be multiplied by 3</p> Type Size (in bytes) Description float 12 (contains 4 each) Faces. Correspond to vertices index"},{"location":"binary_structure/#mesh-control-point","title":"Mesh Control Point","text":"<p>This structure only available if mesh version is equal to <code>MESH_CONTROL_POINT_VERSION</code> (2002)</p> <p>This mesh type is only used for older mesh, especially weapons, it is no longer used again ever since</p> Type Size (in bytes) Description int 4 Point Count <p>This structure only available if point count is more than 0, it loops for each point it has</p> Type Size (in bytes) Description int 4 Type index length char variable The type index, size is depending on the type index length int 4 Linked biped name length char variable The linked biped name, size is depending on the linked biped name length int 4 Extra info length char variable The extra info, size is depending on the extra info length float 12 (contains 4 each) Vector point"},{"location":"binary_structure/#cms","title":"CMS","text":""},{"location":"binary_structure/#header_3","title":"Header","text":"<p>Always available</p> Type Size (in bytes) Description int 4 Signature, always equal to col mesh token int 4 Version, always equal to col mesh version"},{"location":"binary_structure/#mesh","title":"Mesh","text":"Type Size (in bytes) Description int 4 Vertex count float variable (contains 4 each) Position. Vector position of each vertices. Loops for each vertex it has int 4 Face count float variable (contains 4 each) Faces. Correspond to vertices index. Loops for each face it has"},{"location":"events_editor/","title":"Events Editor","text":"<p>Even though implementing events support for the add-on is doable, I have no plans to support them right now. But instead, I made this simple script to read and write events into animation files. I cannot tell you which event does what, as there simply too many events and I have yet to confirm what each one does. Events is currently out of my scope, since my initial plan for the add-on was to support import and exporting the 3d formats, not putting the entire game into the Blender.</p> <p>Downloads</p>  Executable Python <p>Windows only, preferably win10</p> <p>Events Editor (Windows executable)  events_editor.exe \u2022 <code>EXE</code> \u2022 <code>5.63 MB</code></p> <p>Tested on python 3.10</p> <p>Events Editor script  events_editor.py \u2022 <code>PY</code> \u2022 <code>4.62 KB</code></p> events_editor.py<pre><code>#!/usr/bin/env python3\n\nimport os\nimport struct\nimport sys\n\nif __name__ == '__main__':\n    ani_file_location = input(\"file location: \").strip('\"')\n    ani = ani_file_location\n\n    stem = os.path.splitext(os.path.basename(ani_file_location))\n    ani_file_location = stem[0] + '_edit' + stem[1]\n\n    with open(ani, 'rb') as f:\n        header = f.read(4)\n        if header != b'ANI\\0':\n            input('Not an ani file. Press enter to exit')\n            sys.exit()\n\n        ani = header + f.read()\n\n    anim_header_binary = ani[:8]\n    event_count_binary = ani[8:12]\n    event_count = struct.unpack('&lt;I', event_count_binary)[0]\n\n    offset = 12\n    anim_events = []\n    for _ in range(event_count):\n        event_type_length = struct.unpack('&lt;I', ani[offset:offset+4])[0]\n        offset += 4\n\n        event_type = ani[offset:offset+event_type_length]\n        offset += event_type_length\n\n        event_name_length = struct.unpack('&lt;I', ani[offset:offset+4])[0]\n        offset += 4\n\n        event_name = ani[offset:offset+event_name_length]\n        offset += event_name_length\n\n        event_time = int(struct.unpack('&lt;f', ani[offset:offset+4])[0])\n        offset += 4\n\n        anim_events.append((event_time, event_type.decode('utf-8'), event_name.decode('utf-8')))\n\n    leftover_data = ani[offset:]\n\n    while True:\n        print()\n        print('------- Events -------')\n        for index, (time, type, name) in enumerate(anim_events):\n            print(str(index) + ': ' + str(time) + ' | ' + type + ' | ' + name)\n\n        print()\n        user_input = input('Actions:\\n&gt; new [time (in ms), event type, event name]\\n&gt; remove [index]\\n&gt; insert/edit [index] [time (in ms), event type, event name]\\n&gt; exit/save (save the file)\\n&gt;&gt;&gt; ')\n        if not any(user_input.lower().startswith(item) for item in ('new', 'remove', 'insert', 'edit', 'exit', 'save')):\n            print('Not a valid option\\n')\n            continue\n\n        if user_input.lower().startswith('new'):\n            user_args = user_input.split(maxsplit=3)\n            if not len(user_args) &gt;= 4:\n                print('Missing argument')\n                continue\n\n            _, time, event_type, event_name = user_args\n            try:\n                time = int(time)\n            except ValueError:\n                print('Time is not a number')\n                continue\n\n            anim_events.append((time, event_type, event_name))\n\n        elif user_input.lower().startswith('remove'):\n            user_args = user_input.split()\n            if not len(user_args) &gt;= 2:\n                print('Missing argument')\n                continue\n            _, index = user_args\n            try:\n                index = int(index)\n            except ValueError:\n                print('Index is not a number')\n                continue\n            try:\n                anim_events.pop(index)\n            except IndexError:\n                print('Out of range')\n                continue\n\n        elif user_input.lower().startswith('insert') or user_input.lower().startswith('edit'):\n            user_args = user_input.split(maxsplit=4)\n            if not len(user_args) &gt;= 5:\n                print('Missing argument')\n                continue\n\n            _, index, time, event_type, event_name = user_args\n            try:\n                index = int(index)\n                time = int(time)\n            except ValueError:\n                print('Index or Time is not a number')\n                continue\n\n            try:\n                anim_events[index] = (time, event_type, event_name)\n            except IndexError:\n                print('Out of range')\n\n        elif user_input.lower().startswith('exit') or user_input.lower().startswith('save'):\n            break\n\n        anim_events = sorted(anim_events, key=lambda x: x[0])\n\n    with open(ani_file_location, 'wb') as ani:\n        ani.write(anim_header_binary)\n        ani.write(struct.pack('&lt;I', len(anim_events)))\n\n        for time, event_type, event_name in anim_events:\n            ani.write(struct.pack('&lt;I', len(event_type)))\n            ani.write(event_type.encode('utf-8'))\n            ani.write(struct.pack('&lt;I', len(event_name)))\n            ani.write(event_name.encode('utf-8'))\n            ani.write(struct.pack('&lt;f', float(time)))\n        ani.write(leftover_data)\n\n    print()\n    print('Saved file as: ' + ani_file_location)    \n    input('Press enter to exit...')\n    sys.exit()\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#how-to-install-add-on","title":"How to Install Add-on","text":"<p>Make sure your Blender version is 4.1 or above</p> <p>Download the latest release from github. Link https://github.com/Trisnox/lost-saga-io3d/releases, choose <code>Source Code (zip)</code>.</p> <p>After you've downloaded the files, you can either:</p> <ul> <li>Drag and drop the <code>.zip</code> file into the Blender window, and then confirm</li> <li>Install add-on through <code>Edit &gt; Preferences &gt; Add-on &gt; Install from disk</code>. Make sure to enable add-on if you haven't.</li> </ul> <p>After add-on is installed, io3d panel will appear at 3d viewport </p>"},{"location":"sample_files/","title":"Sample Files","text":"<p>This section provides sample files made with <code>lost-saga-io3d</code> add-on, as well the project file themselves. Project files listed in this section are made to be exported.</p>"},{"location":"sample_files/#animation","title":"Animation","text":"<p>Downloads</p>  Blend ANI <p>Blender 4.3.2+ Project file, motion based on Stock Shuffle meme</p> <p>Light Camera Action Project  light_camera_action.zip \u2022 <code>ZIP</code> \u2022 <code>4.21 MB</code></p> <p>FPS doesn't really matter, but they help with more accurate timings</p> <p>Light Camera Action 30fps  lights_camera_action_30fps_w_music.ani \u2022 <code>ANI</code> \u2022 <code>363 KB</code></p> <p>Light Camera Action 100fps  lights_camera_action_100fps_w_music.ani \u2022 <code>ANI</code> \u2022 <code>363 KB</code></p>"},{"location":"sample_files/#static-mesh","title":"Static Mesh","text":"<p>Downloads</p>  Blend Resource Pack <p>Blender 4.4.3+ Project file</p> <p>Static Test  static_test.blend \u2022 <code>BLEND</code> \u2022 <code>1.25 MB</code></p> <p>Resource pack, included files: <code>msh</code> (collision and mesh), staticmodel <code>.txt</code>, material <code>.txt</code>, <code>dds</code> Configuration is not included</p> <p>Static Test Pack  static_test.zip \u2022 <code>ZIP</code> \u2022 <code>340 KB</code></p>"},{"location":"sample_files/#static-mesh-with-submesh","title":"Static Mesh with Submesh","text":"<p>Downloads</p>  Blend Resource Pack <p>Blender 4.5.1+ Project file</p> <p>Spiral Cube  spiral_cube.blend \u2022 <code>BLEND</code> \u2022 <code>285 KB</code></p> <p>Resource pack, included files: <code>msh</code> (mesh), material <code>.txt</code>, <code>dds</code> Configuration is not included</p> <p>Spiral Cube Pack  spiral_cube.zip \u2022 <code>ZIP</code> \u2022 <code>44.1 KB</code></p>"},{"location":"sample_files/#animation-mesh","title":"Animation Mesh","text":"<p>Model taken from SFM workshop</p> <p></p> <p>Downloads</p>  Blend Resource Pack <p>Blender 4.4.3+ Project file</p> <p>Shovel Knight  shovel_knight.blend \u2022 <code>BLEND</code> \u2022 <code>1.05 MB</code></p> <p>Resource pack, included files: <code>msh</code> (mesh), material <code>.txt</code>, <code>dds</code> Configuration is not included</p> <p>Shovel Knight Pack  shovel_knight.zip \u2022 <code>ZIP</code> \u2022 <code>356 KB</code></p>"},{"location":"ANI%20Panel/","title":"ANI Panel","text":""},{"location":"ANI%20Panel/#overview","title":"Overview","text":"<p>Do note that most of operator here only works for advanced skeleton.</p>"},{"location":"ANI%20Panel/#animation-utility","title":"Animation Utility","text":"<ul> <li>Flip Pose: Flip pose, affect entire bones</li> <li>Mirror Pose: Mirror pose, can either copy from opposite, or mirror to opposite</li> <li>Reset Rest State: Reset the bone rotation to its rest state</li> <li>Mirror Target: Used for mirror pose, it can be set to copy or mirror</li> <li>Location/Rotation checkbox: Used for mirror pose, exclude either location or rotation for mirroring</li> <li>Swap Armature Display: Swap between empty or armature display</li> <li>Remap Frames: Remap keyframe timing, only work if user is using <code>Output &gt; Frame Range &gt; Time stretching</code></li> </ul>"},{"location":"ANI%20Panel/#animation","title":"Animation","text":"<ul> <li>Export Animation: Export animation into <code>.ani</code>. Only works for advanced skeleton</li> <li>Apply Delta Transformations: Used for retarget. Apply delta transformations to all selected object and its animation data</li> </ul>"},{"location":"ANI%20Panel/#animation-entry","title":"Animation Entry","text":"<ul> <li>Entry: All imported animation will be listed in this entries</li> <li>Import Animation: Import <code>.ani</code> file or <code>.json</code></li> <li>Delete: Delete animation entry</li> <li>Export: Export animation entry into <code>.json</code> file</li> <li>Use Scene FPS: When enabled, imported animation timing will use current FPS to append keyframes, otherwise user can set their own FPS value</li> <li>Frame Range: Number of keyframes to append, if set to all, then all keyframes will be applied, otherwise only partial amount will be appended</li> <li>Frame Start/End: Used for frame range, if using partial. Limit keyframe only to these range only</li> <li>Frame Insert: Offset to define where the keyframe should be appended</li> <li>Apply Animation: Append animation to selected armature</li> </ul>"},{"location":"ANI%20Panel/animation_entry/","title":"Animation Entry","text":""},{"location":"ANI%20Panel/animation_entry/#entries","title":"Entries","text":"<p>The table contains entries of imported animation. The icon indicate whether the animation sourced from animation file, or retargeted animation, followed by name, and total keyframes correlate to project/scene FPS (unless <code>Use Scene Fps</code> is disabled, it will recalculate keyframe amount based off the FPS input)</p> <p>This entry is project dependant, the entries cannot be transferred from one project to another through <code>File &gt; Link/Append</code>, but can be exported into <code>ANI</code> or <code>JSON</code>.</p> <p>After entry is selected, use the <code>Apply Animation</code> operator to append them to selected empty/armature. It doesn't matter which bone you choose, as long the skeleton was imported using advanced mode.</p>"},{"location":"ANI%20Panel/animation_entry/#entry-import","title":"Entry: Import","text":"<p>Operator to import animation, which then will be append to entries.</p> <p>Multi-file support</p> <p>This operator support processing multiple files at once. Simply select all files you want to import, and then the script will import all of them individually.</p>"},{"location":"ANI%20Panel/animation_entry/#entry-delete","title":"Entry: Delete","text":"<p>Operator to delete animation entry. The current selected entry will be removed.</p>"},{"location":"ANI%20Panel/animation_entry/#entry-export","title":"Entry: Export","text":"<p>Operator to export entry into <code>.json</code>, intended for retarget. To export animation from skeleton, use <code>Export Animation</code> instead</p>"},{"location":"ANI%20Panel/animation_entry/#settings","title":"Settings","text":""},{"location":"ANI%20Panel/animation_entry/#use-scene-fps","title":"Use Scene FPS","text":"<p>Whether to use project FPS, or user defined FPS to calculate keyframes for animation.</p>"},{"location":"ANI%20Panel/animation_entry/#frame-range","title":"Frame Range","text":"<p>If set to partial, then imported animation will only apply animation within this range only.</p> <p>Known Issue</p> <p>This setting is currently broken. Due to recent change on <code>Apply Animation</code> operator, this setting will cause error if set to <code>Partial</code>. Unfortunately I do not know how to fix this.</p>"},{"location":"ANI%20Panel/animation_entry/#frame-insert","title":"Frame Insert","text":"<p>Setting to define where to insert keyframe, can be either: current frame, first frame, or user defined frame.</p>"},{"location":"ANI%20Panel/animation_entry/#apply-animation","title":"Apply Animation","text":"<p>Append animation from selected entry into selected skeleton. It doesn't matter which bone you choose, as long the skeleton was imported using advanced mode.</p> <p>Known Issue</p> <p>Due to recent change, the keyframe insertion method for <code>Apply Animation</code> has been improved, as this is much faster compared to previous version. However, the catch is that partial frame range is no longer possible, and apply animation in between keyframes will also cause error.</p> <p>In order to work around this, simply apply animation after the last keyframe, delete keyframe(s) if you only need partial, and then drag them to your desired frame.</p>"},{"location":"ANI%20Panel/apply_delta/","title":"Apply Delta Transforms","text":"<p>This operator is only for retarget skeleton only.</p>"},{"location":"ANI%20Panel/apply_delta/#apply-delta-transforms","title":"Apply Delta Transforms","text":"<p>Apply delta transformation into all selected objects and its animation data. After applying delta, animation can be exported using <code>Export Animation</code> operator</p> <p>Guide for retargeting also exists.</p> <p>Known Issue</p> <p>This operator only works for position and rotation only, and as long they have animation data into it. If the objects does not contain either data, just simply re-bake the actions with both position and rotation applied</p> <p>Warning</p> <p>Retargeting is currently nowhere near good or perfect, attempting to do so will not produce any doable results. Unfortunately, I have lost motivation to continue retarget. Working with Lost Saga skeleton is already enough as is due to weird skeleton they had. The current retarget is capable of accurately mimicking the rotation of all bones but legs and with twists on some bones.</p>"},{"location":"ANI%20Panel/export_animation/","title":"Export Animation","text":"<p>This operator is only for advanced skeleton only.</p>"},{"location":"ANI%20Panel/export_animation/#export-animation","title":"Export Animation","text":"<p>Export animation from active armature or empties collection. Empties collection simply only need one to be selected, the script will automatically select all bone based on topmost parent. The resulting file is <code>.ani</code></p> <p>Adding Events</p> <p>By default, animations exported using this add-on is empty, you can add events using the <code>Events Editor</code> script.</p> <p>Limitation and Workaround</p> <p>Lost Saga animation can have more than one armature object across single file. Currently, the script does not support this kind of behaviour. Instead, what you should do is to merge the armature together, this way the script will export all animation from each bones accordingly. Just make sure to parent the root bone to <code>origin_correction</code>, since that bone is used as a base parent. Do note that any bones starting with <code>origin_correction</code> name will be skipped, as they're only exist to fix rotation of the armature while retaining original coordinate system.</p> <p>Proposed solution for this problem is to read all bones from all selected objects.</p> <p>Empty vs Armature</p> <p>As stated previously, using either display will not affect export result. It is a matter of preference whether you're much more comfortable animating using empties object, or armature object. The sample file even uses the armature display, but the final result is unaffected.</p> <p>Using armature display does have offset issue, unfortunately this cannot be fixed. This is because the armature uses both rotation and position in pose mode, which cause the armature to appear 2x larger. The armature was scaled down by half to match the humanoid model and cannot have their position reset, otherwise the export result will be broken.</p>"},{"location":"ANI%20Panel/flip_pose/","title":"Flip Pose","text":"<p>This operator is only for advanced skeleton only. </p>"},{"location":"ANI%20Panel/flip_pose/#flip-pose","title":"Flip Pose","text":"<p>Flip pose of the skeleton. It doesn't matter which bone you choose, it will flip the entire pose in x-axis. This is equivalent to <code>ctrl+m</code> on x-axis.</p> <p></p>"},{"location":"ANI%20Panel/mirror_pose/","title":"Mirror Pose","text":"<p>This operator is only for advanced skeleton only.</p>"},{"location":"ANI%20Panel/mirror_pose/#mirror-pose","title":"Mirror Pose","text":"<p>Mirror pose of the selected bones to the opposite bones. Depending on the Mirror Target, this will either copy the pose from opposite bone, or to mirror selected bones pose to the opposite. Does nothing if the bone have no symmetrical counterpart. Works for both Blender and Lost Saga bone names. This is equivalent to Paste Pose Flipped</p>"},{"location":"ANI%20Panel/mirror_pose/#mirror-target","title":"Mirror Target","text":"<p>Operation used for Mirror Pose.</p> <ul> <li><code>Mirror Opposite Bones</code>: Copy pose from selected bones, and then paste them to the opposite</li> <li><code>Copy Opposite Bones</code>: Copy pose from opposite bones, and then paste them to the selected bones</li> </ul> <p>Mirror Target</p> Mirror Opposite BonesCopy Opposite Bones <p></p> <p></p>"},{"location":"ANI%20Panel/mirror_pose/#locationrotation-checkbox","title":"Location/Rotation Checkbox","text":"<p>When either box is unchecked, then location/rotation will not be mirrored</p>"},{"location":"ANI%20Panel/remap_frames/","title":"Remap Frames","text":""},{"location":"ANI%20Panel/remap_frames/#remap-frames","title":"Remap Frames","text":"<p>Remap keyframes based off the old/new time stretching.</p> <p>Warning</p> <p>This operator is intended if you use <code>Output &gt; Frame Range &gt; Time Stretching</code> while having 100 fps, trying to use any other value might be inaccurate. It is expected that the frame map new is equivalent to project fps.</p> <p>Time Stretching</p> <p>Using time stretching allows you to remap the keyframes into approtiate timings. For example, if you were to insert video into viewport, the video speed correlate with the project/scene FPS, so running a 30fps video on 100fps scene will cause it to play ~3x as fast. But with time stretching, you'll be able to animate on 30fps while using 100fps scene, after you're done animating, you then can use remap frames to automatically remap the frames based off the old/new FPS.</p> <p>To use this, simply set project FPS, let's just say 60fps, set the old time stretching to <code>30</code> or any other FPS you desire, and then set the new time stretching to <code>60</code> which match the project FPS.</p>"},{"location":"ANI%20Panel/reset_rest_state/","title":"Reset Rest State","text":"<p>This operator is only for advanced skeleton only.</p>"},{"location":"ANI%20Panel/reset_rest_state/#reset-rest-state","title":"Reset Rest State","text":"<p>Reset selected bones to its rest position and rotation.</p> <p>Initial Rotation</p> <p>Here is what Lost Saga skeleton initial position/rotation looked like.</p> <p>It doesn't resemble anything like humanoid at all, the humanoid form is actually stored inside <code>LocalTMqRot</code> or <code>kObjectMatrix</code>. However, this initial rotation is still needed because animation quaternion calculate their rotation from this initial position, instead of rest rotation from humanoid</p> <p></p>"},{"location":"ANI%20Panel/swap_armature_display/","title":"Swap Armature Display","text":"<p>This operator is only for advanced skeleton only.</p>"},{"location":"ANI%20Panel/swap_armature_display/#swap-armature-display","title":"Swap Armature Display","text":"<p>Swap armature display between empty and armature.</p> <p>Warning</p> <p>Swapping armature display does not carry over existing pose or animation. However, they still retain their data. You can use <code>bake action</code> to transfer animation data since both display constraints each other.</p>"},{"location":"MSH%20Panel/","title":"MSH and Material Info Panel","text":""},{"location":"MSH%20Panel/#overview","title":"Overview","text":""},{"location":"MSH%20Panel/#mesh-utility","title":"Mesh Utility:","text":"<ul> <li>Export Collision: Export selected mesh as collision mesh (<code>.cms</code>)</li> <li>Export Mesh: Export active/selected mesh file(s) as <code>.msh</code>. If more than one mesh is selected, then the mesh will have submeshes, it is ordered alphabetically</li> <li>Surpress Split: When enabled, <code>Preview Split</code> will not split the mesh. Assumes manual split</li> <li>Preview Split: Duplicate the object, then split the mesh (or not depending surpress split), and then change the UV map as if they were being displayed in-game</li> <li>Split Mesh: Split the mesh based off threshold. They will be separated based on indices</li> <li>Maximum Faces: Used for split mesh, each separated mesh will not have more than this specified faces</li> <li>Get Bounding: Get bounding box and its sphere radius, and then copy them to clipboard (copy only works for windows). You would need this for <code>.txt</code> files located at <code>resource/model/</code></li> </ul>"},{"location":"MSH%20Panel/#material-utility","title":"Material Utility","text":"<ul> <li>Import Losa Shader: Import all node groups from <code>losa shader.blend</code> located at root folder of the script</li> <li>Generate Material: Generate material for active object. One of the four options can be choosed</li> <li>Turn Material into Opaque: Set the material into opaque</li> <li>Turn Material into Transparent: Set the material into transparent</li> <li>Toggle Shadeless: toggle shaded/shadeless</li> </ul>"},{"location":"MSH%20Panel/#visibility","title":"Visibility","text":"<ul> <li>Toggle Backface Culling: Toggle backface culling for all material except outline material (which should always active)</li> <li>Toggle Outline: Toggle all outline that uses solidify modifier/inverse hull method</li> </ul>"},{"location":"MSH%20Panel/#material-info","title":"Material Info","text":"<p>It is recommended to collapse this panel when not used.</p> <ul> <li>Export Material: Export material based on the selected object(s)</li> <li>Entry: Contains material entry depending on the selected object(s). Ordered alphabetically</li> </ul>"},{"location":"MSH%20Panel/export_collision/","title":"Export Collision","text":""},{"location":"MSH%20Panel/export_collision/#export-collision","title":"Export Collision","text":"<p>Export active mesh object as collision mesh files (<code>.cms</code>).</p> <p>Exporting mesh will automatically convert the coordinate difference and triangulate the mesh, so there is no need to rotate or triangulate the mesh beforehand.</p> <p>Collision only contains vertex and face indices.</p> <p>Face Orientation</p> <p>Make sure that face are oriented correctly, otherwise they might have weird collision. </p> <p>The collision works depending on the normal direction, for example, if plane is facing to the top and the orientation also facing top, player can stand on the top of the plane, but they can pass through the bottom, but if the plane is facing to the top and the orientation is facing down, player will just pass through the plane, but they can't goes upward from bottom of the plane.</p>"},{"location":"MSH%20Panel/export_material/","title":"Export Material","text":"<p>Warning</p> <p>It is recommended to collapse this panel when not used. This panel process all object material for each action you do on viewport, which may cause minor lag and/or cause error on some context based operator.</p>"},{"location":"MSH%20Panel/export_material/#export-material","title":"Export Material","text":"<p>Export material based on the selected object(s).</p> <p>Exporting material will export them into <code>.txt</code> files, which should be placed at <code>resource/material/...</code>, and have exact filename as its mesh. Selecting multiple object assumes that you're trying to export material that contain submesh.</p>"},{"location":"MSH%20Panel/export_material/#entries","title":"Entries","text":"<p>Contains material entry depending on the selected object(s). Ordered alphabetically.</p> <p>Certain values are obtained either from the material themselves, or the custom properties. Some are editable, some are not.</p>"},{"location":"MSH%20Panel/export_mesh/","title":"Export Mesh","text":""},{"location":"MSH%20Panel/export_mesh/#export-mesh","title":"Export Mesh","text":"<p><code>Don't split faces</code> will surpress mesh split. You should preview the split first to check if the UV are correct, since UV will always somewhat broken if not properly split. Please view in-depth explanation about split mesh for more info.</p> <p>Exporting mesh will automatically convert the coordinate difference and triangulate the mesh(es), so there is no need to rotate or triangulate the mesh beforehand. Also keep in mind that triangulate will double your face count if the mesh contain quads, this wouldn't be problem if your mesh only contain triangles. This is by design for all game engine.</p> <p>When choosing more than one mesh, then the mesh will have submesh, it is ordered alphabetically. For naming convention, you can add suffix like <code>_1/_2/_3</code> to each submesh. Submesh allows for each mesh to have different material.</p> <p>When exporting mesh, you can choose one of the three types of the mesh</p> <p>Refer to vertex component on how the flag works</p> <ul> <li>Static: For static mesh, usually background objects. Contains: position, normals, and UV</li> <li>Lightmap: For static mesh with two UV map, usually background objects. Contains: position, UV, and lightmap UV</li> <li>Animation: For mesh with weights, usually gear, player model, and more. Contains: position, normals, UV, and weights and indices</li> </ul> <p>You can also choose not to export certain flags.</p>"},{"location":"MSH%20Panel/generate_material/","title":"Generate Material","text":""},{"location":"MSH%20Panel/generate_material/#generate-material","title":"Generate Material","text":"<p>An operator to generate material, can choose one out of four options. Intended for creating mesh from scratch.</p> <p>This operator will automatically import the nodes, there is no need to import the nodes beforehand. This operator will automatically set the <code>shader_type</code> property inside material <code>Custom Properties</code>. Aside from those, this operator will automatically setup the nodes for you, depending on which type you choose, so you would only need to set the texture and setting the outline color (can remove the rgb and value nodes if you do not want outline). Make sure to have blank material slot, otherwise this script will error.</p> <p>This is intended to be used with <code>Export Material</code> operator.</p> <p>Please refer to <code>Export Mesh</code> operator to see what each options are for. Choosing <code>Skin</code> will counts as <code>Animation</code>.</p> <p></p> <p>Known issue</p> <p><code>Generate Material operator, Line 83-89</code>, will attempt to switch area context to shader editor, ungroup the node group, and then finding respective node after ungrouping. However, this will cause error if the first slot of material was not the material generated from this operator. Unfortunately, the Blender API does not have the ungroup function without using <code>bpy.ops</code> (which usually limited to certain context area). This issue is considered as 'cannot fix'.</p>"},{"location":"MSH%20Panel/get_bounding/","title":"Get Bounding","text":""},{"location":"MSH%20Panel/get_bounding/#get-bounding","title":"Get Bounding","text":"<p>An operator to get the bounding box and its sphere radius, it will also automatically copy to clipboard (windows only). Regardless, info log will be reported to show the text.</p> <p>You can select multiple meshes to calculate the bounding box based off the sum of all objects.</p> <p>You would only need this if you want to edit/create text files for <code>resource/model/...</code>, which enquire bounding box and sphere.</p> <p></p>"},{"location":"MSH%20Panel/import_nodes/","title":"Import Losa Shader","text":""},{"location":"MSH%20Panel/import_nodes/#import-losa-shader","title":"Import Losa Shader","text":"<p>An operator to import all node groups from <code>losa_shader.blend</code> located in root folder of the script.</p> <p></p>"},{"location":"MSH%20Panel/preview_split/","title":"Preview Split","text":"<p>Not to be confused with Split Mesh.</p> Differences <p><code>Split Mesh</code> operator is to separate mesh into chunks, meanwhile <code>Preview Split</code> operator is to split mesh in attempt to fix UV issues before exporting</p>"},{"location":"MSH%20Panel/preview_split/#preview-split","title":"Preview Split","text":"<p>An operator to preview the UV as if they were displayed in-game. This will also automatically split edges on where vertices have two different coordinate on UV. The object will be duplicated, and the duped object will show their modified UV.</p> <p>If <code>Surpress Split</code> is enabled, then the mesh will not be split. This assumes that you're manually split the mesh yourself.</p> <p>This process is crucial, if you were to export the UV as is, it will become somewhat distorted. This is due to how Lost Saga store their UV map. Each vertices can only have one UV coordinate only, if they have more than one, then a face will be created with the latest indices instead. This process will also cause vertices amount to increase slightly.</p> <p></p>"},{"location":"MSH%20Panel/shader_operator/","title":"Shader Operator","text":""},{"location":"MSH%20Panel/shader_operator/#turn-material-into-opaque","title":"Turn Material into Opaque","text":"<p>Turn selected object material into opaque.</p> <p>What this actually does are:</p> <ul> <li>Set opacity to 0%</li> <li>Uncheck <code>Invert</code> box</li> <li>Uncheck <code>Invert Transparency</code> box</li> </ul>"},{"location":"MSH%20Panel/shader_operator/#turn-material-into-transparent","title":"Turn Material into Transparent","text":"<p>Turn selected object material into transparent. This will turn any black colored pixel to transparent.</p> <p>What this actually does are:</p> <ul> <li>Set opacity to 0%</li> <li>Check <code>Forced Transparency</code> box</li> </ul>"},{"location":"MSH%20Panel/shader_operator/#toggle-shadeless","title":"Toggle Shadeless","text":"<p>Toggle selected object material into shaded/shadeless.</p> <p>What this actually does are:</p> <p>If emission strength is at 100% or more:</p> <ul> <li>Set the emission strength to 0%</li> </ul> <p>If emission strength is less than 100%:</p> <ul> <li>Set the emission strength to 100%</li> <li>Check <code>Preserve Color</code> box</li> </ul>"},{"location":"MSH%20Panel/split_mesh/","title":"Split Mesh","text":"<p>Not to be confused with Preview Split.</p> Differences <p><code>Preview Split</code> operator is to split mesh in attempt to fix UV issues before exporting, meanwhile <code>Split Mesh</code> operator is to separate mesh into chunks</p>"},{"location":"MSH%20Panel/split_mesh/#split-mesh","title":"Split Mesh","text":"<p>Split active mesh object based off threshold set on <code>Maximum Faces</code>.</p> <p>This operator will duplicate the active object, and then hide the original object.</p> <p>This will split mesh into chunks based on the threshold set on <code>Maximum Faces</code>, each chunk cannot have more than specified amount. This is useful to avoid overflow error when trying to load mesh with too many polygons.</p> <p>Lost Saga will fail to load mesh that hit certain limit, this limit only applies to each mesh, but the scene can have as many polygons without issues. The maximum limit is not tested, but it should be safe to have about 20k polygons. Also do note that even with submesh, Lost Saga sums the total amount of polygons regardless of submesh, as submesh only used to allow mesh to have different material.</p> <p>This will also preserve UV map and normals.</p> <p></p>"},{"location":"MSH%20Panel/toggle_backface/","title":"Toggle Backface Culling","text":""},{"location":"MSH%20Panel/toggle_backface/#toggle-backface-culling","title":"Toggle Backface Culling","text":"<p>An operator to toggle backface culling for all material except outline material (which should always active).</p> <p>The value below the button will set to either <code>True</code> or <code>False</code> depending on the previous action.</p> <p>This operator does not toggle backface culling for any material ending with name <code>Outline</code>.</p>"},{"location":"MSH%20Panel/toggle_outline/","title":"Toggle Outline","text":""},{"location":"MSH%20Panel/toggle_outline/#toggle-outline","title":"Toggle Outline","text":"<p>An operator to toggle all outline solidify modifier that uses inverse hull method.</p> <p>The value below the button will set to either <code>True</code> or <code>False</code> depending on the previous action.</p>"},{"location":"SKL%20MSH%20Panel/","title":"SKL MSH Panel","text":""},{"location":"SKL%20MSH%20Panel/#overview","title":"Overview","text":"<ul> <li>Import Skeleton: Import skeleton files <code>.skl</code></li> <li>Import Mesh: Import mesh files <code>.msh</code></li> <li>Import Collision: Import mesh collision files <code>.cms</code></li> </ul>"},{"location":"SKL%20MSH%20Panel/#resource-folder","title":"Resource Folder","text":"<ul> <li>Resource Folder: When set, import mesh will always try to apply material if found. The resource folder structure should looked like this: <pre><code>\u2514\u2500resource\n  \u251c\u2500animation\n  \u2502  \u2514\u2500trail_ani\n  \u251c\u2500effect\n  \u251c\u2500font\n  \u251c\u2500material\n  \u251c\u2500mesh\n  \u251c\u2500model\n  \u2502  \u251c\u2500animodel\n  \u2502  \u2514\u2500staticmodel\n  \u251c\u2500skeleton\n  \u251c\u2500tables\n  \u251c\u2500text\n  \u251c\u2500texture\n  \u2502  \u251c\u2500decalbase\n  \u2502  \u2514\u2500effecttexture\n  \u2514\u2500wave\n      \u2514\u2500bgm\n</code></pre></li> </ul>"},{"location":"SKL%20MSH%20Panel/#utility","title":"Utility","text":"<ul> <li>Attach Armature: One click solution to add armature modifier to all mesh, and using the selected armature as the target</li> <li>Rename Bones: Rename Lost Saga Bones to Blender and vice versa</li> <li>Setup Scene: One click solution to setup scene to match Lost Saga scene setting</li> </ul>"},{"location":"SKL%20MSH%20Panel/attach_armature/","title":"Attach Armature","text":""},{"location":"SKL%20MSH%20Panel/attach_armature/#attach-armature","title":"Attach Armature","text":"<p>One click solution to attach all selected meshes with the target armature.</p> <p>Just simply select all mesh you want to attach armature, and then the target armature, the order does not matter as it will automatically uses the first armature it finds.</p> <p>If you're using advanced skeleton, you would need to use the <code>mesh_armature</code> instead, make sure to unhide it to be able to select them in viewport.</p> <p></p>"},{"location":"SKL%20MSH%20Panel/mesh_import/","title":"Mesh Import","text":""},{"location":"SKL%20MSH%20Panel/mesh_import/#import","title":"Import","text":"<p>You can import mesh files (<code>.msh</code>) through io3d n-panel, inside <code>SKL/MSH</code> panel &gt; Import Mesh, or through <code>File &gt; Import &gt; Lost Saga Mesh (.msh)</code>.</p> <p></p> <p>Multi-file support</p> <p>This operator support processing multiple files at once. Simply select all files you want to import, and then the script will import all of them individually.</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#default-skin-color","title":"Default Skin Color","text":"<p>Only works if resource folder is set, ignored if not specified.</p> <p>If the mesh contain a skin, it will use this choice of skin tone. Do note that their shading might not looked exactly the same when compared in-game.</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#merge-faces","title":"Merge Faces","text":"<p>When enabled, the imported mesh will have their vertices merged on points where they're overlaping each other. If you're using <code>Generate Outline</code> option, this will help make the solidify modifier become cleaner. Please view in-depth explanation about split mesh for more info.</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#generate-outline","title":"Generate Outline","text":"<p>When enabled, the imported mesh will be accompanied by outlines based off the material outline color if provided. By default, the generated outline will use inverse hull method.</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#use-rim-light-instead","title":"Use Rim Light Instead","text":"<p>When enabled, generated outline will use rim light instead of inverse hull method.</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#surpress-color","title":"Surpress Color","text":"<p>When enabled, outline will not use the color provided by the material file if provided. Instead, the mesh will use black color, which is shared across all other mesh that have outline</p>"},{"location":"SKL%20MSH%20Panel/mesh_import/#separate-material","title":"Separate Material","text":"<p>When enabled, each mesh will have different outline material instead of using the shared one</p>"},{"location":"SKL%20MSH%20Panel/rename_bones/","title":"Rename Bones","text":""},{"location":"SKL%20MSH%20Panel/rename_bones/#rename-bones","title":"Rename Bones","text":"<p>Rename all bones into something Blender can recognize, or vice versa.</p> <p>Renaming bones will also rename the vertex group on all attached meshes, which can be helpful to automatically symmetrize weight painting, or to mirror bone position/rotation, just make sure to attach them first before renaming.</p> <p>It is not recommended to rename advanced bones since animation are name dependant.</p>"},{"location":"SKL%20MSH%20Panel/resource_folder/","title":"Resource Folder","text":""},{"location":"SKL%20MSH%20Panel/resource_folder/#resource-folder","title":"Resource Folder","text":"<p>When set, imported mesh will always try to apply material if found. It will use material file located at <code>./material/...txt</code>, if none are found, then the mesh will not have any material.</p> <p>You would only need to set the path on where the resource folder is, the resource folder structure should looked like this: </p><pre><code>\u2514\u2500resource\n  \u251c\u2500animation\n  \u2502  \u2514\u2500trail_ani\n  \u251c\u2500effect\n  \u251c\u2500font\n  \u251c\u2500material\n  \u251c\u2500mesh\n  \u251c\u2500model\n  \u2502  \u251c\u2500animodel\n  \u2502  \u2514\u2500staticmodel\n  \u251c\u2500skeleton\n  \u251c\u2500tables\n  \u251c\u2500text\n  \u251c\u2500texture\n  \u2502  \u251c\u2500decalbase\n  \u2502  \u2514\u2500effecttexture\n  \u2514\u2500wave\n      \u2514\u2500bgm\n</code></pre>"},{"location":"SKL%20MSH%20Panel/setup_scene/","title":"Setup Scene","text":""},{"location":"SKL%20MSH%20Panel/setup_scene/#setup-scene","title":"Setup Scene","text":"<p>One click solution to match Blender scene setting with Lost Saga scene.</p> <p>What it does are:</p> <ul> <li>Change the FPS to 100. Since animation are likely animated at 100 fps, this will help make it lossless</li> <li>Change the clip start to 1</li> <li>Change the clip end to 10,000</li> <li>Change the unit setting to 0.01, which will match unit scale with Lost Saga units (from meter to centimeters)</li> </ul>"},{"location":"SKL%20MSH%20Panel/skeleton_import/","title":"Skeleton Import","text":""},{"location":"SKL%20MSH%20Panel/skeleton_import/#import-skeleton","title":"Import Skeleton","text":"<p>You can import skeleton files (<code>.skl</code>) through io3d n-panel, inside <code>SKL/MSH</code> panel &gt; Import Skeleton, or through <code>File &gt; Import &gt; Lost Saga Skeleton (.skl)</code></p> <p>Usually, you'd want to import <code>normal.skl</code> for humanoid skeleton</p> <p>Warning</p> <p>Do not remove <code>origin_correction</code> bone in any way. This bone is crucial to fix coordinate system differences. Without this, animation might be broken. It's safe to remove the bone if it were imported using lite.</p> <p>Do not apply transformation either, it will break bone rotation.</p> <p>If you want to reset the bone rotation to its rest position, use <code>Reset Rest Position</code> instead. Unless you're using lite/legacy bone, there is no need to use the operator, use <code>alt+r</code> to reset rotation instead.</p>"},{"location":"SKL%20MSH%20Panel/skeleton_import/#modes","title":"Modes","text":"<p>From here you can choose various mode depending on what you need.</p> <p></p> <ul> <li>Lite: If you only need the skeleton to weight paint, or to do animation (not for import/export), you should choose this. This skeleton is formed in same way like advanced does, minus the mesh armature, and the transformation are applied</li> <li>Advanced: This mode allows for pretty much almost everything, mainly import/export animation</li> <li>Retarget: This mode is intended to be used for retarget. Use the armature as the target, bake the empties, use <code>Apply Delta Transforms</code> operator, and then use the <code>Export Animation</code> operator to export them.</li> <li>Legacy: Bones formed using LocalTMvPos/ObjectTMvPos. Use lite/advanced instead</li> </ul>"},{"location":"SKL%20MSH%20Panel/skeleton_import/#display","title":"Display","text":""},{"location":"SKL%20MSH%20Panel/skeleton_import/#empty","title":"Empty","text":"<p>Recommended display</p> <p></p>"},{"location":"SKL%20MSH%20Panel/skeleton_import/#armature","title":"Armature","text":"<p>Not recommended due to offset issue, but they will work fine regardless</p> <p></p> <p>Comparison</p> <p>Comparison of both display. Using armature does not affect the final result when exported</p> <p></p>"},{"location":"Tutorials/","title":"Tutorials/Guides","text":"<p>Note</p> <p>This guide does not teach you how to use Blender, this guide assumes that you already have basic knowledge of blender, this wiki only explain the usage of the add-on. You might need to learn basics of Blender if you want to use this add-on.</p> <p>Do not ask support about usage of Blender either, I will only answer support regarding the add-on. There exist community for Blender though, you can ask for help regarding Blender there, there is also beginner guide on pinned messages.</p> <p>For support about this add-on, you can ask at my Discord server.</p> <p>If you want to know how to properly import/export 3d file formats, this section will explain them</p> <ul> <li> <p> Importing Mesh</p> <p>Guide on how to import meshes</p> <p> Importing Mesh</p> </li> <li> <p> Importing Animation</p> <p>Guide on how to import animation</p> <p> Importing Animation</p> </li> <li> <p> Exporting Mesh</p> <p>Guide on how to export meshes</p> <p> Exporting Mesh</p> </li> <li> <p> Exporting Animation</p> <p>Guide on how to export animation</p> <p> Exporting Animation</p> </li> <li> <p> Retarget Animation</p> <p>Guide on how to retarget animation</p> <p> Retarget Animation</p> </li> </ul> <p>Sample Files</p> <p>Also don't forget to check sample files, as they provide projects files as well the exported result.</p>"},{"location":"Tutorials/exporting_animation/","title":"Exporting Animation","text":"<p>Exporting animation is relatively simple, however, you need certain skill of animating to be able to create decent animation. Either way, to export animation, you simply need to use advanced skeleton, the display and which bone you choose doesn't matter, the script will read the animation data from the empties collection if it was using empty display, or the armature itself if it was using armature display. Optionally, you can also attach mesh, use the <code>mesh_armature</code> object to attach mesh with. This armature is specifically made for meshes.</p> <p>Using either display is up to your choice, both will work the same, and both have same export result. Though, keep in mind that armature display have offset issue, but it will not affect the final result.</p> <p>One display at a time</p> <p>Even though you can swap armature display at any time, the script does not transfer animation data upon switching. So you should stick to only either display. You could however, transfer the animation data by using <code>bake action</code> since both display constraints each other.</p>"},{"location":"Tutorials/exporting_animation/#exporting-animation","title":"Exporting Animation","text":"<p>Just simply import advanced skeleton, and you can start animating on the skeleton. You can also import mesh to see how the animation will looked like on mesh.</p> <p>There are also numerous operator to help with animating, you should use these operator instead of built-in operator due to Lost Saga skeleton have weird bone initial rotation. The operator works for both Lost Saga or Blender bone names if you use rename bones operator, though it's not recommended since there is little usage to renaming advanced skeleton.</p> <p>Since <code>.ani</code> only contains location and rotation, any other keyframe (like scale), will be ignored.</p> <p>Interpolation</p> <p>Unfortunately, Lost Saga always interpolate their keyframes using linear interpolation. If you have any other inpterpolation other than linear in one of your keyframe, you should <code>bake</code> your armature first before exporting. This will bake the inbetween in correlation with the interpolation it uses.</p> <p>Keep location consistent</p> <p>When animating, you should always try to keep the location of the bones to be consistent. It's okay to move the root (not <code>origin_correction</code>) or pelvis bone, but any other bone position should not be altered, unless you wanted to do funky deformation with certain bones.</p> <p></p> <p>Sample Files</p> <p>Still confused? check the sample files here.</p>"},{"location":"Tutorials/exporting_mesh/","title":"Exporting Mesh","text":"<p>Exporting mesh is actually quite simple, you just need to select an object, and then use the <code>Export Mesh</code> operator, or through <code>File &gt; Export &gt; Lost Saga Mesh (.msh)</code>. The script will automatically triangulate, attempt fixing UV (if surpress split is disabled), and convert coordinate differences. If you select more than one mesh, then the mesh will contain submesh. This is useful if you want to have different material for each object. Also keep in mind that triangulate will double your face count if the mesh contain quads, this wouldn't be problem if your mesh only contain triangles. This is by design for all game engine.</p> <p>Material</p> <p>Mesh files does not contain any material data, they are instead separated inside <code>resource/material/.txt</code> file. Use the <code>Export Material</code> operator inside Material Info entry panel to export material of selected object(s).</p> <p>Preview Split</p> <p>It is important that you always check for the UV map before exporting by using the <code>Preview Split</code> operator. This operator will create a duplicate object that shows the UV map as if it was in-game. By default, it will always try to split the vertices where it will break the UV, but you can also manually split them by enabling <code>Surpress Split</code> if you want to.</p>"},{"location":"Tutorials/exporting_mesh/#submesh","title":"Submesh","text":"<p>To create submesh, in edit mode, you can simply select the faces you want to separate. After separation, you should name your mesh with <code>_1/_2/_3/...</code> suffix, as the mesh and material exporter is ordered alphabetically. If you have more than 10 meshes, just simply add <code>_01/_02/_03/...</code> suffix. But keep in mind that submesh does not bypass the mesh limit, use <code>Split Mesh</code> instead if you want more vertex/face on your mesh without causing the overflow error.</p> <p>Warning</p> <p>Keep in mind that if you use submesh, all mesh should have the same type of material type. Eg: the first part of mesh is generated using static, then the rest of the part should be static as well.</p> <p>A mesh cannot have different material type (except animation and skin, as they share the same vertex mask flag), this is because a single mesh file shares vertex mask for a mesh and its submeshes, so having both or all static/lightmap/animation within single file is not possible.</p>"},{"location":"Tutorials/exporting_mesh/#static-mesh","title":"Static Mesh","text":"<p>Static Mesh is by far the easiest mesh to export, as they only contain normals, and single UV map.</p> <p>If you use <code>Generate Material</code> operator, it should be generated using <code>Static</code> option.</p>"},{"location":"Tutorials/exporting_mesh/#lightmap-mesh","title":"Lightmap Mesh","text":"<p>Lightmap have slightly complex, as they have two textures, and two UV map, but they cannot have normals. The UV map doesn't explicitly need to be different as the first one though, it's valid as long it has two UV map regardless.</p> <p>If you use <code>Generate Material</code> operator, it should be generated using <code>LightMap</code> option, this will also create secondary UV map if you haven't.</p> <p>Collision Mesh</p> <p>If you're exporting maps, you should also export the collision as well by using the export collision operator. The lazy way to export collision is to just reuse the mesh.</p>"},{"location":"Tutorials/exporting_mesh/#animation-mesh","title":"Animation Mesh","text":"<p>Animation mesh is somewhat complex, the hard part is to weight painting the mesh, but otherwise they share similar trait to static, wherea animation contain normals, single UV map, and weights. First, import skeleton using lite mode. Attach the skeleton and armature, and you can optionally rename bones if you want to use symmetrize function, which automatically copy your weight paint to opposite side as long the bone name can be recognized by Blender and the mesh is perfectly symmetrical (use Topology Mirror if that doesn't work).</p> <p>Renaming bones</p> <p>If you use rename bones operator, make sure to rename them again before exporting the mesh. This is because exported mesh will have their vertex group name exported. The script does not automate these name conversion yet.</p> <p>If you use <code>Generate Material</code> operator, it should be generated using <code>Animation</code> option, or <code>Skin</code> if you want that part of mesh to be a skin color.</p> <p></p> <p>Sample Files</p> <p>Still confused? check the sample files here.</p>"},{"location":"Tutorials/importing_animation/","title":"Importing Animation","text":"<p>In order to import animation, you need to import skeleton first (using advanced), then animation. Mesh is optional.</p>"},{"location":"Tutorials/importing_animation/#importing-skeleton","title":"Importing Skeleton","text":"<p>Either go to <code>File &gt; Import &gt; Lost Saga Skeleton (.skl)</code>, or through the n-panel, inside SKL/MSH panel, using the <code>Import Skeleton</code> button. After this, choose <code>normal.skl</code>, make sure the mode is set to <code>Advanced</code> (display choice doesn't matter), and then import them.</p>"},{"location":"Tutorials/importing_animation/#importing-animation","title":"Importing Animation","text":"<p>In the <code>Animation Entry</code> panel, click the <code>Import</code> button. After animation has been appended to entry, select the entry you want to insert, select armature/bone, and then click the <code>Apply Animation</code> button</p>"},{"location":"Tutorials/importing_animation/#attaching-mesh","title":"Attaching Mesh","text":"<p>In the outliner, there is <code>mesh_armature</code> object, use that object to attach meshes with.</p> <p></p>"},{"location":"Tutorials/importing_mesh/","title":"Importing Mesh","text":"<p>To import mesh, you can either go through <code>File &gt; Import &gt; Lost Saga Mesh (.msh)</code>, or through the n-panel, inside SKL/MSH panel, using the <code>Import Mesh</code> button. After this, select the <code>.msh</code> files and import.</p> <p></p> <p>Textures</p> <p>If you want the script to automatically assign texture, simply set the <code>Resource Folder</code> path which leads to resource folder. The resource folder should have material and texture folder in order to import textures properly.</p> <p>This is the recommended way to set texture because the script automatically setup the texture and shading for you.</p> <p>Texture now showing</p> <p>If you already set the resource folder, and the material is already applied but the texture is still not showing, the texture is already attached, your viewport shading just need to be changed. You can either set object color to texture, or change to material preview/rendered shading.</p> <p></p> <p>Object disappear on zoom out</p> <p>If your object disappear when zooming out, this is because your clip range is too small. Increase the clip end to see distant object, and increase the clip start to fix artifacts.</p> <p></p>"},{"location":"Tutorials/retarget/","title":"[Not Working] Retarget Animation","text":"<p>Warning</p> <p>Retargeting is currently nowhere near good or perfect, attempting to do so will not produce any doable results. Unfortunately, I have lost motivation to continue retarget. Working with Lost Saga skeleton is already enough as is due to weird skeleton they had. The current retarget is capable of accurately mimicking the rotation of all bones but legs and with twists on some bones.</p> <p>warning</p> <p>Retarget does not support retargeting position due to how Lost Saga skeleton are formed. Forcing position will make the result worse than it was.</p> <p>Retarget involves the process of copying animation sourced from other armature, into another armature. While it might sounds simple, it's not the case with Lost Saga skeleton due to how their skeleton are formed.</p> <p>Initial Rotation</p> <p>Here is what Lost Saga skeleton initial position/rotation looked like.</p> <p>It doesn't resemble anything like humanoid at all, the humanoid form is actually stored inside <code>LocalTMqRot</code> or <code>kObjectMatrix</code>. However, this initial rotation is still needed because animation quaternion calculate their rotation from this initial position, instead of rest rotation from humanoid</p> <p></p> <p>Fortunately, I have create a solution to retargeting, even though it's not perfect.</p>"},{"location":"Tutorials/retarget/#importing-the-skeleton","title":"Importing the Skeleton","text":"<p>First, import skeleton using retarget mode, at which your skeleton should looked like this:</p> <p></p> <p>It contains two skeleton, armature and empties. The armature are used for retarget animation, while the empties are used to export the animation.</p>"},{"location":"Tutorials/retarget/#retargeting-the-animation","title":"Retargeting the Animation","text":"<p>Use the armature as the target armature for the retaget, you should adjust source armature to match with the target armature. After retargeting, the empties will copy the rotation from the retarget armature.</p> <p></p>"},{"location":"Tutorials/retarget/#exporting-retarget","title":"Exporting Retarget","text":"<p>After animation has been properly retargeted, select all empties, and then bake action (<code>F3</code> &gt; Bake Action). Make sure that <code>Visual Keying</code> and <code>Clear Constraints</code> is enabled.</p> <p></p> <p>After baking, use the <code>Apply Delta Transforms</code> operator, and then you can export them using <code>Export Animation</code> operator.</p>"},{"location":"Tutorials/retarget/#final-result","title":"Final Result","text":"<p>You can use the newly <code>.ani</code> file to the advanced skeleton to see and/or tweak the result before exporting to game. As stated previously, the final result is not good.</p> <p></p>"}]}